@page "/Registration"
@using betuapp.Shared
@using betuapp.Client.Service
@inject HttpClient Http
@inject AppState  state

<h1>@number</h1>
<button class="btn btn-primary" onclick=@(async () => await CountNumber())>Login</button>

<h1>Create your account</h1>
<h2>@state.IsLoggedIn</h2>
<h2>@state.storage</h2>
<button class="btn btn-primary" onclick=@(async () => await CreateAccount())>CreateAccount</button>
<button class="btn btn-primary" onclick=@(async () => await Login())>Login</button>
@if (accounts == null)
{

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Username</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var acc in @accounts)
            {
                <tr>
                    <td>@acc.Id</td>
                    <td>@acc.Username</td>
                    <td><button onclick=@(async () => await Delete(acc)) /> </td>
                </tr>
            }
        </tbody>
    </table>
}


@functions {
    int number = 10;
    IList<Account> accounts = new List<Account>();


    private async Task CountNumber()
    {
        number++;
    }


    private async Task Delete(Account acc)
    {
        Account createdAccount = await Http.SendJsonAsync<Account>(HttpMethod.Post, "api/AccountData/DeleteAccount", acc.Id);
        await Refresh();
    }

    private async Task Login()
    {
        var logindet = new LoginDetails()
        {
            Password = "SuperSecretPassword",
            Username = "admin"
        };

        this.state.Login(logindet);
    }


    public async Task CreateAccount()
    {
        number++;
        var account = new Account()
        {
            Firstname = "Tom",
            Lastname = "Clarke",
            Email = "tomclarek@hotmail.ch",
            Username = "tomcl",
            Password = "password",
            OwnedCash = 230
        };
        Account createdAccount = await Http.SendJsonAsync<Account>(HttpMethod.Post, "api/AccountData/CreateAccount", account);
        await Refresh();

    }
    private async Task Refresh()
    {
        accounts = await Http.GetJsonAsync<List<Account>>("api/AccountData/Accounts");
        StateHasChanged();
    }



    protected override async Task OnInitAsync()
    {
        accounts = await Http.GetJsonAsync<Account[]>("api/AccountData/Accounts");
    }

}
