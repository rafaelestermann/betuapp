@page "/betedit"
@using Microsoft.AspNetCore.Components.Layouts
@using betuapp.Shared
@layout MainLayoutLoggedIn
@inject HttpClient Http
@inject betuapp.Client.States.AuthenticationState authenticationstate
@inject betuapp.Client.States.DetailState detailState
@inject IUriHelper uriHelper

<header>
    <link href="..//css/createbet.css" rel="stylesheet" />
    <link href="..//css/general.css" rel="stylesheet" />
</header>



<div>
    <a id="breadCrumbText" href="/mybets">MyBets</a>
    <a id="breadCrumbText">/</a>
    <a id="breadCrumbText" href="/betedit">Edit @detailState.ClickedBetDetail.Name</a>
</div>

<h1>Edit Bet</h1>
<label>Name:</label>
<input type="text" name="email" placeholder="Name" bind=@Name />
<label>Description:</label>
<textarea id="descriptionArea" type="text" name="pass" placeholder="Description" bind=@Description />
<label>DueDate:</label>
<input type="datetime" name="cpass" placeholder="DueDate" bind=@DueDate />
<label>Tip:</label>
<div style="display: flex;">
    <input type="number" name="cpass" placeholder="Tip" style="flex-grow: 1;" bind=@Tip />
    <div id="CHFdiv">
        <span style="display:table-cell; vertical-align:middle;">CHF</span>
    </div>
</div>

<label>Acceptance Critereas:</label>
<ul>
    @if (AcceptanceCritereas.Any())
    {
        foreach (var criterea in AcceptanceCritereas)
        {
            if (criterea.Text == null)
            {
                <li id="listpoint"></li>
            }
            else
            {
                <li id="listpoint">@criterea.Text</li>
            }
        }
    }
</ul>

<div style="display: flex;">
    <input type="text" style="flex-grow: 1;" placeholder="new criterea" bind=@currentCriterea />
    <button onclick="@AddCriterea" id="addCritereaButton">+</button>
</div>


<p class="error">@errormessage</p>
<button onclick="@Save" id="createButton">Save</button>

@functions{
    public string Name;
    public string Description;
    public long Tip;
    public DateTime DueDate;
    public string errormessage;
    public Account challenged;
    public List<AcceptanceCriterea> AcceptanceCritereas;
    public string currentCriterea;

    protected async Task SaveBet()
    {
        var result = await this.Http.SendJsonAsync<ExtentedBet>(HttpMethod.Post, "api/BetData/UpdateBet", this.detailState.ClickedBetDetail);
        this.uriHelper.NavigateTo("/MyBets");
    }

    async Task AddCriterea()
    {
        AcceptanceCritereas.Add(new AcceptanceCriterea()
        {
            Text = currentCriterea
        });

        currentCriterea = "";
    }

    protected override async Task OnInitAsync()
    {
        AcceptanceCritereas = new List<AcceptanceCriterea>();
        this.Name = this.detailState.ClickedBetDetail.Name;
        this.Description = this.detailState.ClickedBetDetail.Description;
        this.DueDate = this.detailState.ClickedBetDetail.DueDate;
        this.Tip = this.detailState.ClickedBetDetail.Tip;
        this.challenged = this.detailState.ClickedBetDetail.Challenged;
        AcceptanceCritereas = this.detailState.ClickedBetAcceptanceCritereas;
    }

    async Task Save()
    {
        //VALIDATION
        if (!IsValidSqlDatetime(DueDate.ToString()))
        {
            errormessage = "DueDate is not valid";
            return;
        }

        ExtentedBet bet = this.detailState.ClickedBetDetail;
        bet.Description = Description;
        bet.Name = Name;
        bet.DueDate = DueDate;
        bet.Tip = Tip;
        bet.Id = this.detailState.ClickedBetDetail.Id;

        var result = await Http.SendJsonAsync<ExtentedBet>(HttpMethod.Post, "api/BetData/UpdateBet", bet);
        this.uriHelper.NavigateTo("/MyBets");
    }

    private bool IsValidSqlDatetime(string someval)
    {
        bool valid = false;
        DateTime testDate = DateTime.MinValue;
        DateTime minDateTime = DateTime.MaxValue;
        DateTime maxDateTime = DateTime.MinValue;

        minDateTime = new DateTime(1753, 1, 1);
        maxDateTime = new DateTime(9999, 12, 31, 23, 59, 59, 997);

        if (DateTime.TryParse(someval, out testDate))
        {
            if (testDate >= minDateTime && testDate <= maxDateTime)
            {
                valid = true;
            }
        }
        return valid;

    }
}