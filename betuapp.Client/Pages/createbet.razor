@page "/createbet"
@using Microsoft.AspNetCore.Blazor.Services
@using Microsoft.AspNetCore.Components.Layouts
@using betuapp.Shared
@layout MainLayoutLoggedIn
@inject betuapp.Client.States.AuthenticationState state
@inject IUriHelper uriHelper
@inject HttpClient Http

<header>
    <link href="..//css/createbet.css" rel="stylesheet" />
    <link href="..//css/general.css" rel="stylesheet" />
</header>


<div>
    <a id="breadCrumbText" href="/mybets">Partners</a>
    <a id="breadCrumbText">/</a>
    <a id="breadCrumbText" href="/createbet">Create Bet</a>
</div>

<h1>Create Bet</h1>
<label>Name:</label>
<input type="text" name="email" placeholder="Name" bind=@Name />
<label>Description:</label>
<textarea id="descriptionArea" type="text" name="pass" placeholder="Description" bind=@Description />
<label>DueDate:</label>
<input type="datetime" name="cpass" placeholder="DueDate" bind=@DueDate />
<label>Tip:</label>
<div style="display: flex;">
    <input type="number" name="cpass" placeholder="Tip" style="flex-grow: 1;" bind=@Tip />
    <div id="CHFdiv">
        <span style="display:table-cell; vertical-align:middle;">CHF</span>
    </div>
</div>

<label>Acceptance Critereas:</label>
<ul>
    @foreach (var criterea in AcceptanceCritereas)
    {
        <li id="listpoint">@criterea.Text</li>
    }
</ul>

<div style="display: flex;">
    <input type="text" style="flex-grow: 1;" placeholder="new criterea" bind=@currentCriterea />
    <button onclick="@AddCriterea" id="addCritereaButton">+</button>
</div>

<label>Challenged Account:</label>
<select bind="@selectedChallenged">
    <option>Select Challenged</option>

    @foreach (var acco in challengeableAccounts)
    {
        <option value="@acco.Id">@(acco.Firstname + " " + acco.Lastname)</option>
    }
</select>
<p class="error">@errormessage</p>
<button onclick="@Create" id="createButton">Create</button>

@functions{
    public List<Account> challengeableAccounts = new List<Account>();
    public string Name;
    public string Description;
    public long Tip;
    public DateTime DueDate;
    public string errormessage;
    public long? selectedChallenged;
    public List<AcceptanceCriterea> AcceptanceCritereas;
    public string currentCriterea;

    async Task AddCriterea()
    {
        AcceptanceCritereas.Add(new AcceptanceCriterea()
        {
            Text = currentCriterea
        });

    currentCriterea = "";
    }

    async Task Create()
    {
        //VALIDATION
        if (!IsValidSqlDatetime(DueDate.ToString()))
        {
            errormessage = "DueDate is not valid";
            return;
        }

        if (selectedChallenged == null)
        {
            errormessage = "Challenged is not selected";
            return;
        }


        Bet bet = new Bet();
        bet.ChallengerId = this.state.loggedInAccount.Id;
        bet.ChallengedId = selectedChallenged.Value;
        bet.Description = Description;
        bet.Name = Name;
        bet.DueDate = DueDate;
        bet.Tip = Tip;

        var result = await Http.SendJsonAsync<Bet>(HttpMethod.Post, "api/BetData/CreateBet", bet);
        AcceptanceCritereas.ForEach(criterea => criterea.BetId = result.Id);
        var result2 = await Http.SendJsonAsync<List<AcceptanceCriterea>>(HttpMethod.Post, "api/BetData/CreateAcceptanceCritereas", AcceptanceCritereas);
        this.uriHelper.NavigateTo("/MyBets");
    }

    protected override async Task OnInitAsync()
    {
        AcceptanceCritereas = new List<AcceptanceCriterea>();
        DueDate = DateTime.Now;
        var loggedInAccountId = this.state.loggedInAccount.Id;
        challengeableAccounts = await Http.GetJsonAsync<List<Account>>("api/AccountData/Accounts");
        challengeableAccounts = challengeableAccounts.Where(x => x.Id != loggedInAccountId).ToList();

    }

    private bool IsValidSqlDatetime(string someval)
    {
        bool valid = false;
        DateTime testDate = DateTime.MinValue;
        DateTime minDateTime = DateTime.MaxValue;
        DateTime maxDateTime = DateTime.MinValue;

        minDateTime = new DateTime(1753, 1, 1);
        maxDateTime = new DateTime(9999, 12, 31, 23, 59, 59, 997);

        if (DateTime.TryParse(someval, out testDate))
        {
            if (testDate >= minDateTime && testDate <= maxDateTime)
            {
                valid = true;
            }
        }
        return valid;

    }
}
