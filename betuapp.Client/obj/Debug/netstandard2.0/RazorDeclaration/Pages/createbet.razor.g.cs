#pragma checksum "C:\Users\rafae\source\repos\betuapp\betuapp.Client\Pages\createbet.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f001a95afaac75ed256a7a10961cd80fba3e2e64"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace betuapp.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using betuapp.Client;
    using betuapp.Client.Shared;
    using Microsoft.AspNetCore.Blazor.Services;
    using Microsoft.AspNetCore.Components.Layouts;
    using betuapp.Shared;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayoutLoggedIn))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/createbet")]
    public class createbet : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 36 "C:\Users\rafae\source\repos\betuapp\betuapp.Client\Pages\createbet.razor"
           
    public List<Account> challengeableAccounts = new List<Account>();
    public string Name;
    public string Description;
    public long Tip;
    public DateTime DueDate;
    public string errormessage;
    public long? selectedChallenged;

    async Task Create()
    {
        //VALIDATION
        if (!IsValidSqlDatetime(DueDate.ToString()))
        {
            errormessage = "DueDate is not valid";
            return;
        }

        if (selectedChallenged == null)
        {
            errormessage = "Challenged is not selected";
            return;
        }

        Bet bet = new Bet();
        bet.ChallengerId = this.state.loggedInAccount.Id;
        bet.ChallengedId = selectedChallenged.Value;
        bet.Description = Description;
        bet.Name = Name;
        bet.DueDate = DueDate;
        bet.Tip = Tip;

        var result = await Http.SendJsonAsync<Bet>(HttpMethod.Post, "api/BetData/CreateBet", bet);
        this.uriHelper.NavigateTo("/MyBets");
    }

    protected override async Task OnInitAsync()
    {
        DueDate = DateTime.Now;
        var loggedInAccountId = this.state.loggedInAccount.Id;
        challengeableAccounts = await Http.GetJsonAsync<List<Account>>("api/AccountData/Accounts");
        challengeableAccounts = challengeableAccounts.Where(x => x.Id != loggedInAccountId).ToList();
    }

    private bool IsValidSqlDatetime(string someval)
    {
        bool valid = false;
        DateTime testDate = DateTime.MinValue;
        DateTime minDateTime = DateTime.MaxValue;
        DateTime maxDateTime = DateTime.MinValue;

        minDateTime = new DateTime(1753, 1, 1);
        maxDateTime = new DateTime(9999, 12, 31, 23, 59, 59, 997);

        if (DateTime.TryParse(someval, out testDate))
        {
            if (testDate >= minDateTime && testDate <= maxDateTime)
            {
                valid = true;
            }
        }
        return valid;

    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUriHelper uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private betuapp.Client.States.AuthenticationState state { get; set; }
    }
}
#pragma warning restore 1591
